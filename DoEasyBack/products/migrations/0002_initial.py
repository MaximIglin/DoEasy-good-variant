# Generated by Django 3.2.6 on 2021-09-14 12:40

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('categories', '0001_initial'),
        ('user', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='user.customuser', verbose_name='Пользователь')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер телефона')),
            ],
            options={
                'verbose_name': 'Покупатель',
                'ordering': ['user'],
            },
        ),
        migrations.CreateModel(
            name='Manufacturer_country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Страна')),
            ],
            options={
                'verbose_name': 'Страна производитель',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Smartphones',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название товара')),
                ('slug', models.SlugField(default='', max_length=200, unique=True, verbose_name='Слаг')),
                ('image_link', models.CharField(max_length=300, verbose_name='Ссылка на изображение')),
                ('description', models.TextField(verbose_name='Описание товара')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('stock', models.PositiveIntegerField(verbose_name='Остаток товара')),
                ('relise_year', models.PositiveIntegerField(default=2021, verbose_name='Год релиза')),
                ('color', models.CharField(default='', max_length=40, verbose_name='Цвет')),
                ('available', models.BooleanField(default=True)),
                ('created', models.DateField(auto_now=True)),
                ('display_diagnal', models.CharField(default='', max_length=10, verbose_name='Диагональ экрана')),
                ('screen_resolution', models.CharField(default=' x ', max_length=10, verbose_name='Разрешение экрана')),
                ('display_technology', models.CharField(default='', max_length=20, verbose_name='Тип дисплея')),
                ('cpu', models.CharField(max_length=250, null=True, verbose_name='Процессор')),
                ('number_of_processor_cores', models.PositiveIntegerField(null=True, verbose_name='Количество ядер процессора')),
                ('main_camera_mpix', models.CharField(max_length=10, null=True, verbose_name='Основная камера')),
                ('number_of_main_cameras', models.PositiveIntegerField(null=True, verbose_name='Количество основыных камер')),
                ('video_resolution', models.CharField(max_length=20, null=True, verbose_name='Максимальное разрешение видео-съемки')),
                ('front_camera_mpix', models.CharField(max_length=10, null=True, verbose_name='Фронтальная камера')),
                ('ram', models.PositiveIntegerField(null=True, verbose_name='Оперативная память (GB)')),
                ('rom', models.PositiveIntegerField(null=True, verbose_name='Встроенной памяти (GB)')),
                ('battery_capacity', models.CharField(max_length=20, null=True, verbose_name='Ёмкость аккумулятора')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.brand', verbose_name='Бренд')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='categories.category', verbose_name='Категория')),
                ('manufecture_country', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='products.manufacturer_country', verbose_name='Страна производитель')),
            ],
            options={
                'verbose_name': 'Смартфоны',
            },
        ),
        migrations.CreateModel(
            name='Laptops',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название товара')),
                ('slug', models.SlugField(default='', max_length=200, unique=True, verbose_name='Слаг')),
                ('image_link', models.CharField(max_length=300, verbose_name='Ссылка на изображение')),
                ('description', models.TextField(verbose_name='Описание товара')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('stock', models.PositiveIntegerField(verbose_name='Остаток товара')),
                ('relise_year', models.PositiveIntegerField(default=2021, verbose_name='Год релиза')),
                ('color', models.CharField(default='', max_length=40, verbose_name='Цвет')),
                ('available', models.BooleanField(default=True)),
                ('created', models.DateField(auto_now=True)),
                ('display_diagnal', models.CharField(default='', max_length=10, verbose_name='Диагональ экрана')),
                ('screen_resolution', models.CharField(default=' x ', max_length=10, verbose_name='Разрешение экрана')),
                ('display_technology', models.CharField(default='', max_length=20, verbose_name='Тип дисплея')),
                ('cpu', models.CharField(max_length=250, null=True, verbose_name='Процессор')),
                ('number_of_processor_cores', models.PositiveIntegerField(null=True, verbose_name='Количество ядер процессора')),
                ('main_camera_mpix', models.CharField(max_length=10, null=True, verbose_name='Основная камера')),
                ('ram', models.PositiveIntegerField(null=True, verbose_name='Оперативная память (GB)')),
                ('rom', models.PositiveIntegerField(null=True, verbose_name='Встроенной памяти (GB)')),
                ('battery_capacity', models.CharField(max_length=20, null=True, verbose_name='Ёмкость аккумулятора')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.brand', verbose_name='Бренд')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='categories.category', verbose_name='Категория')),
                ('manufecture_country', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='products.manufacturer_country', verbose_name='Страна производитель')),
            ],
            options={
                'verbose_name': 'Ноутбуки',
            },
        ),
        migrations.AddField(
            model_name='cartproduct',
            name='cart',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_products', to='products.cart', verbose_name='Корзина'),
        ),
        migrations.AddField(
            model_name='cartproduct',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='cartproduct',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.customer', verbose_name='Покупатель'),
        ),
        migrations.AddField(
            model_name='cart',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.customer', verbose_name='Владелец'),
        ),
        migrations.AddField(
            model_name='cart',
            name='products',
            field=models.ManyToManyField(blank=True, related_name='related_carts', to='products.CartProduct'),
        ),
    ]
